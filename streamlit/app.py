# streamlit/app.py
import streamlit as st
import os
from pathlib import Path
import shutil
# –í–∞–∂–Ω–æ: –ù–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç, –Ω–æ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from rag_core import get_or_create_vector_store, create_rag_chain

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="RAG-—á–∞—Ç —Å –≤–∞—à–∏–º–∏ PDF",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ RAG-—á–∞—Ç —Å –≤–∞—à–∏–º–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º.
**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1.  **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
2.  **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤**.
3.  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"**, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
4.  **–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å** –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
""")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    # –ö–æ–¥ –¥–ª—è API-–∫–ª—é—á–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –∏–∑ .env, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ
        from rag_core import _load_api_key_from_env
        default_key = _load_api_key_from_env()
    except (RuntimeError, ImportError):
        default_key = ""

    api_key_input = st.text_input(
        "OpenRouter API Key",
        type="password",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á...",
        value=default_key,
        help="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –Ω–∞ openrouter.ai"
    )
    if api_key_input:
        st.session_state.openrouter_api_key = api_key_input
    
    st.divider()

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ PDF-—Ñ–∞–π–ª—ã",
        type="pdf",
        accept_multiple_files=True
    )
    process_button = st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", type="primary")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ—Ä–µ–Ω—å), –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
BASE_DIR = Path(__file__).resolve().parents[1]
PDF_DIR = BASE_DIR / "pdfs"
VECTOR_STORE_PATH = BASE_DIR / "faiss_index"
PDF_DIR.mkdir(parents=True, exist_ok=True)

if process_button:
    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not uploaded_files:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω PDF-—Ñ–∞–π–ª.")
    elif 'openrouter_api_key' not in st.session_state or not st.session_state.openrouter_api_key:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    else:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö
        for file_path in PDF_DIR.iterdir():
            if file_path.is_file():
                file_path.unlink()
        for uploaded_file in uploaded_files:
            with open(PDF_DIR / uploaded_file.name, "wb") as f:
                f.write(uploaded_file.getbuffer())
        
        with st.spinner("–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."):
            try:
                index, metadata, embedder = get_or_create_vector_store(
                    pdf_dir=str(PDF_DIR),
                    index_dir=str(VECTOR_STORE_PATH),
                    force_rebuild=True
                )
                st.session_state.rag_chain = create_rag_chain(
                    index=index,
                    metadata=metadata,
                    embedder=embedder,
                    openrouter_api_key=st.session_state.openrouter_api_key
                )
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                st.session_state.messages = []
                st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                if VECTOR_STORE_PATH.exists():
                    shutil.rmtree(VECTOR_STORE_PATH)

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ ---
st.header("–î–∏–∞–ª–æ–≥")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
if "messages" not in st.session_state:
    st.session_state.messages = []

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if "context" in message and message["context"]:
             with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ LLM"):
                st.text(message["context"])


# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
    if 'rag_chain' not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    else:
        # 1. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # 2. –ü–æ–ª—É—á–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        with st.chat_message("assistant"):
            with st.spinner("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."):
                try:
                    rag_chain = st.session_state.rag_chain
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    answer, context = rag_chain["answer_question"](prompt)
                    
                    response_placeholder = st.empty()
                    response_placeholder.markdown(answer)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ LLM"):
                        st.text(context)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": answer,
                        "context": context # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    })

                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")